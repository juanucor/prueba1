/***
    Mangiro.Ads
    Attachable Events:

    * mgr-ads-loaded: Mangiro.Ads Start process ended and ads ready
    * mgr-ads-stickyIn: Showing Mega TOP Sticky
    * mgr-ads-stickyOut: Hiding Mega TOP Sticky
    * mgr-ads-slotRendered: GPT Event 'slotRenderEnded' Parameter: 'slot' (i.e.: div-gpt-ad-m)

    StickyAd Object:
    {
        active (false),
        maxwidth (768),
        slot ("div-gpt-ad-m"),
        time (3000)
    }
*/
(function (root, factory) {
    if (typeof define === "function" && define.amd) {
        define("mangiro.ads", ["throttle", "gpt"], function (a0) {
            return factory(a0);
        });
    } else if (typeof exports === "object") {
        module.exports = factory(require("throttle"));
    } else {
        factory(Cowboy);
    }
})(this, function ($cow) {

    if (typeof $cow === "undefined" && typeof Cowboy !== "undefined") $cow = Cowboy;
    if (typeof $cow === "undefined") $cow = $;

    log = window.log || function () { };

    var Ads = function () {
        "use strict";

        log("Mangiro.Ads > Loading Library...");

        function Ads(o) {
            o = o || {};
            this.isDesktop = typeof o.isDesktop !== 'undefined' ? o.isDesktop : true;
            this.preLoad = typeof o.preLoad !== 'undefined' ? o.preLoad : false;
            this.loadingTimeout = o.loadingTimeout || function () { return 10; }();
            this.appearTopOffset = o.appearTopOffset || function () { return 400; }();
            this.ads = o.ads || [];
            this.customTargeting = o.customTargeting || [];
            this.throttleTimeout = o.throttleTimeout || 150;
            this.revalidateTimeout = o.revalidateTimeout || 2999;
            // GPT Config
            this.singleRequest = typeof o.singleRequest !== 'undefined' ? o.singleRequest : false;
            this.asyncRendering = typeof o.asyncRendering !== 'undefined' ? o.asyncRendering : true;
            this.setCentering = typeof o.setCentering !== 'undefined' ? o.setCentering : true;
            this.npaAds = (typeof window.mgr.CMP !== "undefined" && window.mgr.CMP.getGoogleConsent() === 1) ? "0" : "1";
            // sticky ad
            this.stickyad = {
                active: typeof o.stickyad.active !== 'undefined' ? o.stickyad.active : false,
                maxwidth: o.stickyad.maxwidth || 768,
                slot: o.stickyad.slot || "div-gpt-ad-m",
                time: o.stickyad.time || 3000
            };
            // relocate banners
            this.relocate = typeof o.relocate !== 'undefined' ? o.relocate : true;
            o.relocateMobile = o.relocateMobile || {};
            this.relocateMobile = {
                adContainerR: o.relocateMobile.adContainerR || ".ad-container-r1",
                adContainerR2: o.relocateMobile.adContainerR2 || ".ad-container-r2",
                beforeMobileAdNodeClass: o.relocateMobile.beforeMobileAdNodeClass || ".ad-mobile-top"
            };

            // relocate inlineBanner
            o.relocateInline = o.relocateInline || {};
            this.relocateInline = {
                containers: o.relocateInline.containers || '.article-main .article-content',
                ads: o.relocateInline.ads || '.ad-container-r2',
                elements: o.relocateInline.elements || '.article-content > .article-txt > p, .article-content > .article-txt > section, .article-content > .article-txt > figure',
                applyToTag: o.relocateInline.applyToTag || false,
                minimunElements: o.relocateInline.minimunElements || 2
            };
        }

        // Privates
        var _general_slot = '';
        var _ads_loaded = [];
        var _timer;
        var _started = false;
        var _scrollEventHandler;
        var _stickyAdsEventHandler;
        var _revalidateScrollEventHandler;

        var _deviceWidth = window.outerWidth;
        var _sizeMappings = [];

        var _gpt;

        var _addEventListener = 'addEventListener';
        var addEventListener = window[_addEventListener];

        var defineSlot = function (ad, adManager) {
            if (ad === null || adManager === null) return false;

            var ad_container = document.getElementById(ad.id);
            if (ad_container === null) return false;

            ad_container.setAttribute('data-appear-top-offset', adManager.appearTopOffset);
            ad_container.setAttribute('data-mangiro-top-offset', ad_container.getBoundingClientRect().top + window.scrollY);

            if (typeof ad.mapSizes !== 'undefined' && ad.mapSizes != null) {
                if (typeof _sizeMappings[ad.mapSizes.Name] === 'undefined' || _sizeMappings[ad.mapSizes.Name] == null) {
                    var googleTagMap = _gpt.sizeMapping();
                    for (var i = 0; i < ad.mapSizes.Mappings.length; i++) {
                        googleTagMap.addSize(ad.mapSizes.Mappings[i].Browser, ad.mapSizes.Mappings[i].Ads);
                    }
                    _sizeMappings[ad.mapSizes.Name] = googleTagMap.build();
                }

                ad.responsiveMapping = _sizeMappings[ad.mapSizes.Name];
                if (!mappingAppliesToDevice(ad)) return false;
            }

            log("Mangiro.Ads > Defining Ad Slot:" + ad.id);
            if (ad.position && ad.position.length > 0 && ad.position[0] !== undefined) {
                if (typeof MGR_ads[ad.id] !== "undefined") {
                    _gpt.pubads().refresh([MGR_ads[ad.id]]);
                } else {
                    MGR_ads[ad.id] = _gpt.defineSlot(ad.slot, ad.slotSizes, ad.id);
                    if (ad.responsiveMapping) MGR_ads[ad.id].defineSizeMapping(ad.responsiveMapping);
                    MGR_ads[ad.id].setTargeting('p', ad.position);
                    //
                    MGR_ads[ad.id].setTargeting('optout', adManager.npaAds);
                    if (typeof ad.customTargets !== "undefined" && Object.keys(ad.customTargets).length > 0) {
                        log("Mangiro.Ads > Set the CustomTargetings");
                        for (var key in ad.customTargets) {
                            if (ad.customTargets.hasOwnProperty(key)) {
                                MGR_ads[ad.id].setTargeting(key, ad.customTargets[key]);
                            }
                        }
                    }
                    MGR_ads[ad.id].addService(_gpt.pubads());
                }
            }
            return true;
        };

        var isInViewport = function (ad) {
            if (ad != null) {
                var ad_container = document.getElementById(ad.id);
                if (ad_container != null) {
                    if (!!(ad_container.offsetWidth || ad_container.offsetHeight || ad_container.getClientRects().length)) {

                        if (typeof $ !== "undefined") ad_container.setAttribute('data-mangiro-top-offset', $(ad_container).offset().top);

                        var offsetTop = ad_container.getAttribute('data-mangiro-top-offset');

                        var offsetBottom = parseInt(offsetTop, 10) + parseInt(ad.slotSizes[0][1], 10);
                        var topLimit = window.scrollY;
                        var bottomLimit = topLimit + window.outerHeight;

                        return ((offsetBottom >= topLimit && offsetTop <= topLimit) || (offsetTop <= bottomLimit && offsetBottom >= topLimit));
                    }
                }
            }
            return false;
        };

        var manageAdDisplay = function (ad, adManager) {
            if (!ad.loaded && (ad.initLoad || isInViewport(ad))) {
                log('Mangiro.Ads > Will Display Ad: ' + ad.id);
                _gpt.cmd.push(function () {
                    log('Mangiro.Ads > Displaying Ad: ' + ad.id);
                    if (adManager.preLoad) {
                        //_gpt.pubads().refresh(ad.id);
                        _gpt.pubads().refresh([MGR_ads[ad.id]]);
                    } else {
                        _gpt.display(ad.id);
                    }
                    ad.loaded = true;
                    _ads_loaded.push(ad);
                });
                return true;
            }
            return false;
        };

        var mappingAppliesToDevice = function (ad) {
            return true; // TODO
        };

        var relocateMobileBanners = function (config) {
            log("Mangiro.Ads > Relocate Banners > Relocating Mobile Ads...");
            var relocateConfig = config.relocateMobile;
            var rAdContainer = document.querySelectorAll(relocateConfig.adContainerR);
            var r2AdContainer = document.querySelectorAll(relocateConfig.adContainerR2);
            var beforeMobileAdNode = document.querySelectorAll(relocateConfig.beforeMobileAdNodeClass);

            if (rAdContainer.length > 0) {
                for (var i = 0; i < beforeMobileAdNode.length; i++) {
                    if (rAdContainer.length > i) {
                        beforeMobileAdNode[i].parentNode.insertBefore(rAdContainer[i], beforeMobileAdNode[i]);
                        //var rAdContainerChilds = rAdContainer[i].childNodes;
                        //if (beforeMobileAdNode.length > i && rAdContainerChilds.length > 0) {}
                    }
                }
            }
            if (r2AdContainer.length > 0) {
                log("Mangiro.Ads > Relocate Banners > Relocating Mobile Ads... Launching inner relocation");
                Ads.prototype.relocateInlineBanners(config.relocateInline);
            }

        };

        // PUBLIC API

        Ads.prototype.start = function () {
            log("Mangiro.Ads > Starting...");

            var that = this;
            _gpt = googletag;

            _scrollEventHandler = $cow.throttle(that.throttleTimeout, function () {
                log('Mangiro.Ads > Throttling control...');
                for (var i in that.ads) {
                    var ad = that.ads[i];
                    if (manageAdDisplay(ad, that)) {
                        that.ads.splice(that.ads.indexOf(ad), 1);
                    }
                }

                if (that.ads.length == 0) {
                    log("Mangiro.Ads > Removing Scroll Event");
                    _started = true;
                    window.removeEventListener("scroll", _scrollEventHandler);
                }
                log('Mangiro.Ads > Banners to look... ' + that.ads.length);
            });

            _stickyAdsEventHandler = function () {
                document.body.className += ' sticky-ad';
                var stickyInEvent = new CustomEvent("mgr-ads-stickyIn", { "detail": "Sticky in" });
                document.dispatchEvent(stickyInEvent);
                setTimeout(function () {
                    document.body.className = document.body.className.replace('sticky-ad', '');
                    var stickyOutEvent = new CustomEvent("mgr-ads-stickyOut", { "detail": "Sticky out" });
                    document.dispatchEvent(stickyOutEvent);
                }, that.stickyad.time);
            };

            _revalidateScrollEventHandler = function () {
                log("Mangiro.Ads > Revalidating Scroll Event");
                if (that.ads.length > 0) {
                    log("Mangiro.Ads > Adding Scroll Event and Revalidations");
                    //window.removeEventListener("scroll", _scrollEventHandler);
                    addEventListener("scroll", _scrollEventHandler, true);
                    //setTimeout(_revalidateScrollEventHandler, that.revalidateTimeout);
                } else {
                    log("Mangiro.Ads > Removing Scroll Event and Revalidations");
                    window.removeEventListener("scroll", _scrollEventHandler);
                }
            };

            // Refresh the npaAds value just in case
            this.npaAds = (typeof window.mgr.CMP !== "undefined" && window.mgr.CMP.getGoogleConsent() === 1) ? "0" : "1";

            _gpt.cmd.push(function () {
                log("Mangiro.Ads > Defining Slots");
                _gpt.NamedSize = 'fluid';

                // MAP SIZING
                //var sizeMappings = [];

                // Relocate Banners On Mobile
                if (that.relocate && window.mgr.utils.isMobile.any())
                    relocateMobileBanners(that);

                // DEFINE ALL SLOTS
                for (var i in that.ads) {
                    var ad = that.ads[i];
                    defineSlot(ad, that);
                }

                // SET GENERAL PAGE CUSTOM TARGETING
                if (that.customTargeting) {
                    log("Mangiro.Ads > Setting Custom Targetings...");
                    for (var key in that.customTargeting) {
                        if (that.customTargeting.hasOwnProperty(key)) {
                            _gpt.pubads().setTargeting(key, that.customTargeting[key]);
                        }
                    }
                }

                // ATTACH SLOT_RENDER EVENTS
                _gpt.pubads().addEventListener('slotRenderEnded', function (event) {
                    if (!event.isEmpty && event.slot !== null) {
                        var slotId = event.slot.getSlotElementId();
                        log("Mangiro.Ads > GPT > Slot Rendered: " + slotId);
                        // Relaunch event!
                        var renderEvent = new CustomEvent("mgr-ads-slotRendered", { "detail": { "slot": slotId } });
                        document.dispatchEvent(renderEvent);
                        var slotsRendered = window.slotsRendered || {};
                        slotsRendered[slotId] = true;
                        window.slotsRendered = slotsRendered;

                        // Sticky Ads rises
                        if (that.stickyad.active && window.innerWidth < that.stickyad.maxwidth && slotId == that.stickyad.slot) {
                            log("Mangiro.Ads > Launching Sticky Event");
                            _stickyAdsEventHandler();
                        }

                    } else {
                        log("Mangiro.Ads > GPT > Empty Slot: " + slotId);
                    }
                });

                log('Mangiro.Ads > Enabling Services...');
                if (that.singleRequest || that.preLoad) _gpt.pubads().enableSingleRequest();
                if (that.asyncRendering) _gpt.pubads().enableAsyncRendering();
                else _gpt.pubads().enableSyncRendering();
                if (that.preLoad) _gpt.pubads().disableInitialLoad();
                _gpt.pubads().setCentering(that.setCentering);
                _gpt.pubads().setRequestNonPersonalizedAds(parseInt(that.npaAds));
                _gpt.enableServices();

                log('Mangiro.Ads > Displaying initial banners...');
                var ads_aux = that.ads.slice();
                for (var i in ads_aux) {
                    var ad = ads_aux[i];
                    if (that.preLoad) {
                        _gpt.cmd.push(function () {
                            log('Mangiro.Ads > PreLoading Ad: ' + ad.id);
                            _gpt.display(ad.id);
                        });
                    }
                    if (manageAdDisplay(ad, that)) {
                        that.ads.splice(that.ads.indexOf(ad), 1);
                    }
                }

                setInterval(_revalidateScrollEventHandler, that.revalidateTimeout);

                // Create the event
                log("Mangiro.Ads > Dispatching event 'mgr-ads-loaded'");
                var event = new CustomEvent("mgr-ads-loaded", { "detail": "Mangiro Ads Loaded" });
                document.dispatchEvent(event);
                window.mgrAdsReady = true;
            });
        };

        Ads.prototype.pushAd = function (newAd) {
            var that = this;
            try {
                defineSlot(newAd, that);
                that.ads.push(newAd);
                if (that.preLoad) {
                    _gpt.cmd.push(function () {
                        log('Mangiro.Ads > PreLoading Ad: ' + newAd.id);
                        _gpt.display(newAd.id);
                    });
                }
                //_revalidateScrollEventHandler();
                if (manageAdDisplay(newAd, that)) {
                    that.ads.splice(that.ads.indexOf(newAd), 1);
                }
            } catch (e) {
                log("Mangiro.Ads > Can't push new ad: " + newAd);
            }
        };

        Ads.prototype.relocateInlineBanners = function (config) {
            var c = {};
            c.containers = config.containers || '.article-main .article-content';
            c.ads = config.ads || '.ad-container-r2';
            c.elements = config.elements || '.article-content > .article-txt > p, .article-content > .article-txt > section, .article-content > .article-txt > figure';
            c.applyToTag = config.applyToTag || false;
            c.minimunElements = config.minimunElements || 2;

            log("Mangiro.Ads > Relocate Banners > Starting...");
            // Relocate inline banners...
            // 1. Selector de publis: .ad-inline
            // 2. Selector de contenido: '.content > p, .content > figure'
            var containers = document.querySelectorAll(c.containers);

            if (containers.length > 0) {
                var container = containers[0];
                var banners = document.querySelectorAll(c.ads);
                var elements = document.querySelectorAll(c.elements);

                if (banners.length === 0) {
                    log("Mangiro.Ads > Relocate Banners > No banners to relocate...");
                    return;
                }

                // If not enough space, remove last banner and don't relocate
                if (elements.length <= c.minimunElements) {
                    var lastBanner = banners[banners.length - 1];
                    lastBanner.parentNode.removeChild(lastBanner);
                    log("Mangiro.Ads > Relocate Banners > Not enough elements...");
                    return;
                }

                var breakPoint = Math.floor(elements.length / (banners.length + 1));
                if (c.applyToTag) {
                    if (elements.length > 6 && banners.length > 0) {
                        var tagElement = elements[5];
                        if (tagElement) tagElement.parentNode.insertBefore(banners[0], element.nextSibling);
                    }
                } else {
                    log("Mangiro.Ads > Relocate Banners > Breakpoint: " + breakPoint);
                    for (var i = 0; i < banners.length; i++) {
                        var banner = banners[i];
                        var element = elements[breakPoint * (i + 1)];
                        log("Mangiro.Ads > Relocate Banners > Positioning Banner: " + banner + " after element: " + element);
                        if (element) element.parentNode.insertBefore(banner, element.nextSibling);
                    }
                }
            } else {
                log("Mangiro.Ads > Relocate Banners > No container defined...");
            }
        };

        Ads.prototype.getGeneralSlot = function () {
            var that = this;

            if (_general_slot === '') {
                if (_ads_loaded.length > 0) {
                    _general_slot = _ads_loaded[0].slot;
                }
                if (that.ads.length > 0) {
                    _general_slot = that.ads[0].slot;
                }
            }

            return _general_slot;
        };

        Ads.prototype.refreshAd = function (slot) {
            _gpt.pubads().refresh([MGR_ads[slot]]);
        };

        return Ads;
    }();

    var Mangiro = window.MGR || {};
    Mangiro.Ads = Ads;

    return Mangiro.Ads;

});